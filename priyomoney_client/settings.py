"""
Django settings for priyomoney_client project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os, pytz
from dotenv import load_dotenv
from corsheaders.defaults import default_headers
from google.oauth2 import service_account
from datetime import timedelta  # Keep this import
from celery.schedules import crontab  # Keep this import
import firebase_admin
from firebase_admin import  credentials

load_dotenv()
DEBUG = os.getenv('APP_DEBUG', 'false').lower() == 'true'
IS_PRODUCTION = os.getenv('IS_PRODUCTION', 'false').lower() == 'true'
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split(" ")
SECRET_KEY = os.getenv('APP_SECRET_KEY', '')


# Application definition
if not IS_PRODUCTION:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = os.getenv("CORS_ALLOWED_ORIGINS").split(" ")

INSTALLED_APPS = [
    # packages
    'corsheaders',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django_celery_results',
    'django_celery_beat',
    'django_extensions',
    'django_filters',
    'drf_yasg',
    'dynamic_preferences',
    'generic_relations',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'storages',
    'whitenoise.runserver_nostatic',

    # apps
    'accounts',
    'admin_transfer',
    'bd_transfer',
    'beneficiary',
    'business',
    'core',
    'common',
    'conversion_rate',
    'disclosure',
    'dues',
    'dynamic_settings',
    'external_payment',
    'fees',
    'file_uploader',
    'invitation',
    'otp',
    'pay_admin',
    'webhook',
    'verifications',
    'ticket',
    'ipay',
    'subscription',
    'products',
    'bdpay',
    'resource_pricing',
    'topup',
    'coupon',
    'notification',
    'graph',
    'firebase',
    'linked_business',
    'payment_gateway',
    'students',
]

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DATA_UPLOAD_MAX_MEMORY_SIZE = 24 * 1024 * 1024
FILE_UPLOAD_MAX_MEMORY_SIZE = 24 * 1024 * 1024

#firebase admin configuration
FIREBASE_CREDENTIAL = os.getenv('FIREBASE_CREDENTIAL', None)
if FIREBASE_CREDENTIAL is not None:
    firebase_cred = credentials.Certificate(FIREBASE_CREDENTIAL)
    firebase_admin.initialize_app(firebase_cred)

# Google Cloud Storage (Bucket) settings
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME', 'priyo_pay_dev_docs')
GS_BUCKET_CREDENTIAL = os.getenv('GS_BUCKET_CREDENTIAL', None)
GS_EXPIRATION = timedelta(minutes=60)
# User provided file name will be kept 172 characters. We save the file name in DB with folder name.
GS_BUCKET_FILE_NAME_MAX_CHAR = 172

if GS_BUCKET_CREDENTIAL is None:
    GS_CREDENTIALS = None
else:
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        os.path.join(BASE_DIR, GS_BUCKET_CREDENTIAL)
    )

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'middlewares.database_router.DatabaseRouteSelectionMiddleware',
    'middlewares.authentication.AuthMiddleware',
    'middlewares.api_logger.LoggingMiddleware',
    'middlewares.country_guard.CountryGuardMiddleware',
    'middlewares.otp_guard.OTPGuardMiddleware',
    'middlewares.verification_center.VerificationCenterMiddleware'
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-api-key",
    "sd-webhook-sha256-signature",
    "device-fingerprint",
    "device-type"
]

CORS_ALLOW_CREDENTIALS = True

def get_redis_url():
    host = os.getenv("REDIS_HOST") or "127.0.0.1"
    port = os.getenv("REDIS_PORT") or 6379
    return f"redis://{host}:{port}"


ROOT_URLCONF = 'priyomoney_client.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'priyomoney_client.context_processors.defaults'
            ],
        },
    },
]

WSGI_APPLICATION = 'priyomoney_client.wsgi.application'
MASTER_DB_KEY = 'default'
SLAVE_DB_KEY = 'priyo_pay_slave'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    MASTER_DB_KEY: {
        'ENGINE': "django.db.backends.postgresql_psycopg2",
        'NAME': os.environ['DEFAULT_DB_NAME'],
        'USER': os.environ['DEFAULT_DB_USER'],
        'PASSWORD': os.environ['DEFAULT_DB_PASSWORD'],
        'HOST': os.getenv('DEFAULT_DB_HOST', 'localhost'),
        'PORT': os.getenv('DEFAULT_DB_PORT', '5432'),
    },
    SLAVE_DB_KEY: {
        'ENGINE': "django.db.backends.postgresql_psycopg2",
        'NAME': os.getenv('SLAVE_DB_NAME', os.environ['DEFAULT_DB_NAME']),
        'USER': os.getenv('SLAVE_DB_USER', os.environ['DEFAULT_DB_USER']),
        'PASSWORD': os.getenv('SLAVE_DB_PASSWORD', os.environ['DEFAULT_DB_PASSWORD']),
        'HOST': os.getenv('SLAVE_DB_HOST', 'localhost'),
        'PORT': os.getenv('SLAVE_DB_PORT', '5432'),
        'TEST': {
            'MIRROR': 'default',
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": get_redis_url() + "/1",
        "KEY_PREFIX": 'priyo-pay',
        "TIMEOUT": None,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
DATABASE_ROUTERS = ['priyomoney_client.routes.CustomRouter', ]
ENABLE_SLAVE_DB = os.getenv('ENABLE_SLAVE_DB')   # 'always', 'never' or 'only_get', only used for CustomRouter


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'pay_admin.password_validators.PayAdminPasswordValidator',
        'OPTIONS': {
            'min_length': 8,
            'min_lowercase': 1,
            'min_uppercase': 1,
            'min_digits': 1,
            # 'min_special': 1,
            # 'special_chars': r'+-*/@#$%^&()_<>?|{}[]~`',
        }
    }
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = os.getenv("TZONE", 'UTC')
USE_I18N = True
USE_TZ = True
BD_TIME_ZONE = 'Asia/Dhaka'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

if DEBUG:
    COMPRESS_ROOT = os.path.join(BASE_DIR, 'static')

STRICT_SECURITY = os.getenv('STRICT_SECURITY', 'false').lower() == 'true'

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        },
    },
}
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'utilities.pagination.CustomPagination',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'PAGE_SIZE': 20,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'priyomoney_client.authentication.JWTAuth',
        'pay_admin.authentication.PayAdminAuth',
        'priyomoney_client.authentication.PriyoBusinessAuth',
        'priyomoney_client.authentication.BDPayAuth',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.StaticHTMLRenderer',
    ],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.StaticHTMLRenderer',
    ],
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_THROTTLE_RATES': {
        'anon': '25/minute',
    }
}

# All oprtions: https://django-dynamic-preferences.readthedocs.io/en/latest/installation.html
DYNAMIC_PREFERENCES = {
    # The python module in which registered preferences will be searched within each app
    'REGISTRY_MODULE': 'dynamic_settings',

    # Use this to disable caching of preference. This can be useful to debug things
    'ENABLE_CACHE': False if DEBUG else True,
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(filename)s %(funcName)s %(module)s %(message)s'
        },
        'basic': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers': {
        "null": {
            "class": "logging.NullHandler",
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'basic'
        },
        'debug': {
            'filters': ['require_debug_true'],
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'log/debug.log',
            'formatter': 'verbose',
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'log/info.log',
            'formatter': 'basic',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'log/error.log',
            'formatter': 'basic',
        },
        "mail_admins": {
            "level": "ERROR",
            # "filters": ["require_debug_false"],
            "class": "utilities.log_handlers.SendgridAdminEmailHandler",
        },
        "django.server": {
            "level": "INFO",
            'class': 'logging.FileHandler',
            'filename': 'log/requests.log',
            "formatter": "basic",
        },
    },
    'loggers': {
        '': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['console', 'debug', 'info', 'error', 'mail_admins'],
        },
        'django': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['console', 'debug', 'info', 'error', 'mail_admins'],
            "propagate": False,
        },
        "django.server": {
            "level": "INFO",
            "handlers": ["django.server"],
            "propagate": True,
        },

    }
}
if os.environ.get('DEBUG_SQL', 'False').lower() == 'true':
    LOGGING['loggers']['django.db.backends'] = {
        'level': 'DEBUG',
        'handlers': ['debug'],  # Quiet by default!
        'propagate': False,
    }

# Admin JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=float(os.environ['ADMIN_ACCESS_TOKEN_LIFETIME_MINUTES'])),
    'TOKEN_OBTAIN_SERIALIZER': 'pay_admin.serializers.PayAdminObtainPairSerializer',
    'UPDATE_LAST_LOGIN': True
}

IS_SWAGGER_ENABLED = os.getenv('IS_SWAGGER_ENABLED', 'True').lower() == 'true'
SEND_FAKE_OTP = os.environ['SEND_FAKE_OTP'].lower() == 'true'

AUTH_API_BASE = os.environ['AUTH_API_BASE']
AUTH_API_KEY = os.environ['AUTH_API_KEY']
OWN_BASE_URL = os.environ['OWN_BASE_URL']
CLIENT_SIDE_BASE_URL = os.environ['CLIENT_SIDE_BASE_URL']
ADMIN_SIDE_BASE_URL = os.environ['ADMIN_SIDE_BASE_URL']

SYNCTERA_TENANT = os.getenv('SYNCTERA_TENANT')
SYNCTERA_BASE_URL = os.getenv('SYNCTERA_BASE_URL')
SYNCTERA_API_KEY = os.getenv('SYNCTERA_API_KEY')
SYNCTERA_SAVINGS_ACCOUNT_TEMPLATE = os.getenv('SYNCTERA_SAVINGS_ACCOUNT_TEMPLATE')
SYNCTERA_CHECKING_ACCOUNT_TEMPLATE = os.getenv('SYNCTERA_CHECKING_ACCOUNT_TEMPLATE')

BDPAY_BASE_URL = os.getenv('BDPAY_BASE_URL')
BDPAY_API_KEY = os.getenv('BDPAY_API_KEY')

SMS_URL = os.environ['SMS_URL']
SMS_GATEWAY_KEY = os.environ['SMS_GATEWAY_KEY']

AUTH_USER_MODEL = 'pay_admin.PayAdmin'
OTP_TOTP_ISSUER = 'Priyo Money'

REDIS_HOST = os.getenv('REDIS_HOST')
REDIS_PORT = os.getenv('REDIS_PORT')

REDIS_SUB_TIMEOUT = os.getenv('REDIS_SUB_TIMEOUT')
REDIS_SUB_SLEEP = os.getenv('REDIS_SUB_SLEEP')

EXTERNAL_API_TIMEOUT = int(os.getenv('EXTERNAL_API_TIMEOUT'))

CELERY_BROKER_URL = get_redis_url() + "/2"
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_WORKER_MAX_RETRY = int(os.getenv('CELERY_WORKER_MAX_RETRY'))
CELERY_WORKER_RETRY_COUNTDOWN = int(os.getenv('CELERY_WORKER_RETRY_COUNTDOWN'))
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
SENDGRID_GENERAL_TEMPLATE_ID = os.getenv('SENDGRID_GENERAL_TEMPLATE_ID')
SENDGRID_PROMOTIONAL_FROM_EMAIL = os.getenv('SENDGRID_PROMOTIONAL_FROM_EMAIL', 'info@priyo.com')
SENDGRID_INVEST_PROMO_FROM_EMAIL = os.getenv('SENDGRID_INVEST_PROMO_FROM_EMAIL', 'invest@priyo.com')
SENDGRID_INVEST_PROMO_FROM_NAME = os.getenv('SENDGRID_INVEST_PROMO_FROM_NAME', 'Priyo Inc.')
SENDGRID_MAIL_FROM_EMAIL = os.getenv('SENDGRID_MAIL_FROM_EMAIL', 'notify@priyo.com')
SENDGRID_MAIL_FROM_NAME = os.getenv('SENDGRID_MAIL_FROM_NAME', 'Priyo Pay')
SENDGRID_REFERRAL_TEMPLATE_ID = os.getenv('SENDGRID_REFERRAL_TEMPLATE_ID')
SENDGRID_PROMOTIONAL_TEMPLATE_ID = os.getenv('SENDGRID_PROMOTIONAL_TEMPLATE_ID')
MAX_NUMBER_OF_EMAIL_FOR_BATCH = os.getenv('MAX_NUMBER_OF_EMAIL_FOR_BATCH')

SPEND_CONTROL_TIME_RANGE_DAYS = os.getenv('SPEND_CONTROL_TIME_RANGE_DAYS', 30)
IPAY_INTERNAL_ACCOUNT_PURPOSE = os.getenv('IPAY_INTERNAL_ACCOUNT_PURPOSE', 'TREASURY')
PRIYO_BUSINESS_ACCOUNT_ID = os.environ['PRIYO_BUSINESS_ACCOUNT_ID']
PRIYO_DEPOSIT_ACCOUNT_ID = os.environ['PRIYO_DEPOSIT_ACCOUNT_ID']

EMAIL_JSON_FILE = os.getenv('EMAIL_JSON_FILE', 'priyo_pay_emails.json')
ADMIN_EMAIL_ADDRESSES = os.getenv('ADMIN_EMAIL_ADDRESSES', 'zs@priyo.com')
OFFICIAL_ADMIN_EMAIL = os.getenv('OFFICIAL_ADMIN_EMAIL', 'pay@priyo.com')
OPERATIONS_EMAIL = os.getenv('OPERATIONS_EMAIL', 'dev@priyo.com')

IPAY_OFFICIAL_ADMIN_EMAIL = os.getenv('IPAY_OFFICIAL_ADMIN_EMAIL')
IPAY_ADMIN_EMAIL_ADDRESSES = os.getenv('IPAY_ADMIN_EMAIL_ADDRESSES')
SUPER_ADMIN_EMAIL_ADDRESS = os.getenv('SUPER_ADMIN_EMAIL_ADDRESS')
AUTOSEND_EMAIL = os.getenv('AUTOSEND_EMAIL').lower() == 'true'
BATCH_MAIL_TESTER_EMAIL = os.getenv('BATCH_MAIL_TESTER_EMAIL', 'priyosys.developer@gmail.com')

CSRF_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'
# 3600 set low, but when site is ready for deployment, set to at least 15768000 (6 months)
SECURE_HSTS_SECONDS = os.getenv('SECURE_HSTS_SECONDS', 3600)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
CSRF_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_SECURE = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

OTP_SECRET = os.environ['OTP_SECRET']
PROFILE_CACHE_PREFIX = "profile-"
PROFILE_CACHE_TTL = int(os.getenv('PROFILE_CACHE_TTL', 0))

SESSION_EXPIRED_AFTER_LOGIN_SECONDS = int(os.getenv('SESSION_EXPIRED_AFTER_LOGIN_SECONDS', 1800))
# SESSION_EXPIRED_AFTER_INACTIVE_SECONDS = int(os.getenv('SESSION_EXPIRED_AFTER_INACTIVE_SECONDS', 600))

ADMIN_BUSINESS_SYNCTERA_ID = os.environ['ADMIN_BUSINESS_SYNCTERA_ID']
PRIYO_SERVICES_BUSINESS_SYNCTERA_ID = os.environ['PRIYO_SERVICES_BUSINESS_SYNCTERA_ID']
MAXIMUM_ALLOWED_IDENTITY_DOCS = os.environ['MAXIMUM_ALLOWED_IDENTITY_DOCS']

PERSONA_API_BASE = os.environ['PERSONA_API_BASE']
PERSONA_API_KEY = os.environ['PERSONA_API_KEY']

METABASE_SECRET_KEY = os.environ['METABASE_SECRET_KEY']
METABASE_SITE_URL = os.environ['METABASE_SITE_URL']
METABASE_EMBED_URL_EXPIRATION_MINUTES = int(os.environ['METABASE_EMBED_URL_EXPIRATION_MINUTES'])

ZENDESK_API_BASE = os.environ['ZENDESK_API_BASE']
ZENDESK_API_TOKEN = os.environ['ZENDESK_API_TOKEN']
ZENDESK_ADMIN_EMAIL = os.environ['ZENDESK_ADMIN_EMAIL']

PAYMENT_GATEWAY_API_BASE = os.environ['PAYMENT_GATEWAY_API_BASE']
PAYMENT_GATEWAY_API_KEY = os.environ['PAYMENT_GATEWAY_API_KEY']

IPAY_EBG_URL = os.environ['IPAY_EBG_URL']
IPAY_EBG_API_KEY = os.environ['IPAY_EBG_API_KEY']

PORICHOY_BASE_URL = os.environ['PORICHOY_BASE_URL']
PORICHOY_API_KEY = os.environ['PORICHOY_API_KEY']

UCB_BASE_URL = os.environ['UCB_BASE_URL']
UCB_USER_ID = os.environ['UCB_USER_ID']
UCB_USER_PASSWORD_ENCODED = os.environ['UCB_USER_PASSWORD_ENCODED']
UCB_TXN_PASSWORD_ENCODED = os.environ['UCB_TXN_PASSWORD_ENCODED']
UCB_JAR_FILE = os.environ['UCB_JAR_FILE']
UCB_PUBLIC_KEY = os.environ['UCB_PUBLIC_KEY']
UCB_BANK_CODE = os.environ['UCB_BANK_CODE']

MONGODB_CONNECTION_STRING = os.environ['MONGODB_CONNECTION_STRING']
MONGODB_DB_NAME = os.environ['MONGODB_DB_NAME']

PAYMENT_GATEWAY_HEAD_ACCOUNT = os.getenv('PAYMENT_GATEWAY_HEAD_ACCOUNT', 0)

# Todo: Find a proper way to handle this
MTB_INTERNATIONAL_WIRE_DETAILS = {
    "bank_address": {
        "country_code": "BD",
        "city": "DHAKA",
        "address_line_1": "MTB CENTRE, 26 GULSHAN AVENUE",
        "postal_code": "1212"
    },
    "swift_code": "MTBLBDDHXXX"
}
PRIYO_PAY_BD_MOBILE_NUMBER_PROVIDED_FOR_US_USERS = os.environ['PRIYO_PAY_BD_MOBILE_NUMBER_PROVIDED_FOR_US_USERS']

IMRG_BASE_URL=os.getenv('IMRG_BASE_URL')
IMRG_API_KEY=os.getenv('IMRG_API_KEY')
TOPUP_HEAD_ACCOUNT_ID_BDPAY=int(os.getenv('TOPUP_HEAD_ACCOUNT_ID_BDPAY'))
FEE_BUCKET_ID_BDPAY=int(os.getenv('FEE_BUCKET_ID_BDPAY'))

BRAC_BANK_CODE = os.environ['BRAC_BANK_CODE']


GRAPH_DB_URL = os.environ['GRAPH_DB_URL']
GRAPH_DB_USERNAME = os.environ['GRAPH_DB_USERNAME']
GRAPH_DB_PASSWORD = os.environ['GRAPH_DB_PASSWORD']

LEAST_AMOUNT_TO_HOLD_IN_CENTS = 100
LEAST_AMOUNT_REMAINING_AFTER_DUE_CHARGE_IN_CENTS = 50

PROFILE_APPROVAL_ADMIN_STEP = int(os.getenv('PROFILE_APPROVAL_ADMIN_STEP', 2))
ADMIN_TRANSFER_CREATOR_ID = int(os.getenv('ADMIN_TRANSFER_CREATOR_ID', 3))
MAX_INSUFFICIENT_DECLINES_TO_SUSPEND_CARD = int(os.getenv('MAX_INSUFFICIENT_DECLINES_TO_SUSPEND_CARD', 10))